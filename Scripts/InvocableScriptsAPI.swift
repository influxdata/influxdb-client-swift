//
// InvocableScriptsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import InfluxDBSwift

extension InfluxDB2API {
public class InvocableScriptsAPI222 {
    private let influxDB2API: InfluxDB2API

    public init(influxDB2API: InfluxDB2API) {
        self.influxDB2API = influxDB2API
    }

    /**
     Delete a script
     
     - parameter scriptID: (path) The ID of the script to delete. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func deleteScriptsID(scriptID: String, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: Void?, _ error: InfluxDBClient.InfluxDBError?) -> Void) {
        deleteScriptsIDWithRequestBuilder(scriptID: scriptID).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a script
     - DELETE /scripts/{scriptID}
     - Deletes a script and all associated records.
     - API Key:
       - type: apiKey Authorization 
       - name: TokenAuthentication
     - parameter scriptID: (path) The ID of the script to delete. 
     - returns: RequestBuilder<Void> 
     */
    internal func deleteScriptsIDWithRequestBuilder(scriptID: String) -> RequestBuilder<Void> {
        var path = "/scripts/{scriptID}"
        let scriptIDPreEscape = "\(APIHelper.mapValueToPathItem(scriptID))"
        let scriptIDPostEscape = scriptIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scriptID}", with: scriptIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void> = influxDB2API.requestBuilderFactory.getRequestNonDecodableBuilder(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     List scripts
     
     - parameter limit: (query) The number of scripts to return. (optional)
     - parameter offset: (query) The offset for pagination. (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func getScripts(limit: Int? = nil, offset: Int? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: Scripts?, _ error: InfluxDBClient.InfluxDBError?) -> Void) {
        getScriptsWithRequestBuilder(limit: limit, offset: offset).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List scripts
     - GET /scripts
     - API Key:
       - type: apiKey Authorization 
       - name: TokenAuthentication
     - parameter limit: (query) The number of scripts to return. (optional)
     - parameter offset: (query) The offset for pagination. (optional)
     - returns: RequestBuilder<Scripts> 
     */
    internal func getScriptsWithRequestBuilder(limit: Int? = nil, offset: Int? = nil) -> RequestBuilder<Scripts> {
        let path = "/scripts"
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters: [String: Any]? = nil

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "limit": limit?.encodeToJSON(),
            "offset": offset?.encodeToJSON()
        ])

        let requestBuilder: RequestBuilder<Scripts> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Retrieve a script
     
     - parameter scriptID: (path) The script ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func getScriptsID(scriptID: String, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: Script?, _ error: InfluxDBClient.InfluxDBError?) -> Void) {
        getScriptsIDWithRequestBuilder(scriptID: scriptID).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Retrieve a script
     - GET /scripts/{scriptID}
     - Uses script ID to retrieve details of an invocable script.
     - API Key:
       - type: apiKey Authorization 
       - name: TokenAuthentication
     - parameter scriptID: (path) The script ID. 
     - returns: RequestBuilder<Script> 
     */
    internal func getScriptsIDWithRequestBuilder(scriptID: String) -> RequestBuilder<Script> {
        var path = "/scripts/{scriptID}"
        let scriptIDPreEscape = "\(APIHelper.mapValueToPathItem(scriptID))"
        let scriptIDPostEscape = scriptIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scriptID}", with: scriptIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters: [String: Any]? = nil

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Script> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Update a script
     
     - parameter scriptID: (path) The script ID. 
     - parameter scriptUpdateRequest: (body) Script update to apply 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func patchScriptsID(scriptID: String, scriptUpdateRequest: ScriptUpdateRequest, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: Script?, _ error: InfluxDBClient.InfluxDBError?) -> Void) {
        patchScriptsIDWithRequestBuilder(scriptID: scriptID, scriptUpdateRequest: scriptUpdateRequest).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a script
     - PATCH /scripts/{scriptID}
     - Updates properties (`name`, `description`, and `script`) of an invocable script. 
     - API Key:
       - type: apiKey Authorization 
       - name: TokenAuthentication
     - parameter scriptID: (path) The script ID. 
     - parameter scriptUpdateRequest: (body) Script update to apply 
     - returns: RequestBuilder<Script> 
     */
    internal func patchScriptsIDWithRequestBuilder(scriptID: String, scriptUpdateRequest: ScriptUpdateRequest) -> RequestBuilder<Script> {
        var path = "/scripts/{scriptID}"
        let scriptIDPreEscape = "\(APIHelper.mapValueToPathItem(scriptID))"
        let scriptIDPostEscape = scriptIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scriptID}", with: scriptIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scriptUpdateRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Script> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Create a script
     
     - parameter scriptCreateRequest: (body) The script to create. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func postScripts(scriptCreateRequest: ScriptCreateRequest, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: Script?, _ error: InfluxDBClient.InfluxDBError?) -> Void) {
        postScriptsWithRequestBuilder(scriptCreateRequest: scriptCreateRequest).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a script
     - POST /scripts
     - API Key:
       - type: apiKey Authorization 
       - name: TokenAuthentication
     - parameter scriptCreateRequest: (body) The script to create. 
     - returns: RequestBuilder<Script> 
     */
    internal func postScriptsWithRequestBuilder(scriptCreateRequest: ScriptCreateRequest) -> RequestBuilder<Script> {
        let path = "/scripts"
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scriptCreateRequest)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Script> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Invoke a script
     
     - parameter scriptID: (path)  
     - parameter scriptInvocationParams: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func postScriptsIDInvoke(scriptID: String, scriptInvocationParams: ScriptInvocationParams? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: String?, _ error: InfluxDBClient.InfluxDBError?) -> Void) {
        postScriptsIDInvokeWithRequestBuilder(scriptID: scriptID, scriptInvocationParams: scriptInvocationParams).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Invoke a script
     - POST /scripts/{scriptID}/invoke
     - Invokes a script and substitutes `params` keys referenced in the script with `params` key-values sent in the request body.
     - API Key:
       - type: apiKey Authorization 
       - name: TokenAuthentication
     - parameter scriptID: (path)  
     - parameter scriptInvocationParams: (body)  (optional)
     - returns: RequestBuilder<String> 
     */
    internal func postScriptsIDInvokeWithRequestBuilder(scriptID: String, scriptInvocationParams: ScriptInvocationParams? = nil) -> RequestBuilder<String> {
        var path = "/scripts/{scriptID}/invoke"
        let scriptIDPreEscape = "\(APIHelper.mapValueToPathItem(scriptID))"
        let scriptIDPostEscape = scriptIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{scriptID}", with: scriptIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: scriptInvocationParams)

        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<String> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }
}
}
