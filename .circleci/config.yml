#
# The MIT License
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
#

version: 2.1

commands:
  influxdb-onboarding:
    steps:
      - run:
          name: Install onBoarding dependencies
          command: |
            apt-get update
            apt-get install wget curl ruby --yes
      - run:
          name: Post onBoarding request to InfluxDB 2
          command: ./Scripts/influxdb-onboarding.sh
  prepare:
    description: Prepare environment to tests
    steps:
      - checkout
      - influxdb-onboarding
  swiftlint-install:
    description: Download and install swiftlint
    steps:
      - run: |
          apt-get update
          apt-get install wget unzip --yes
          wget https://github.com/realm/SwiftLint/releases/download/0.45.0/swiftlint_linux.zip
          unzip -n swiftlint_linux.zip
          ln -s /root/project/swiftlint /usr/bin/swiftlint
  check-example:
    description: Check << parameters.directory >> example
    parameters:
      directory:
        type: string
    steps:
      - run: |
          cd Examples/<< parameters.directory >>/
          swiftlint --strict
          swift package resolve
          swift build --target InfluxDBSwift
          swift build --target InfluxDBSwiftApis
          swift build --target ArgumentParser
          swift build

jobs:
  tests-linux:
    parameters:
      swift-image:
        type: string
        default: &default-swift-image "swift:5.10"
      influxdb-image:
        type: string
        default: &default-influxdb-image "influxdb:latest"
    docker:
      - image: << parameters.swift-image >>
        environment:
          SWIFT_JUNIT_RESULT_PATH: junit.xml
      - image: << parameters.influxdb-image >>
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :8086
    steps:
      - prepare
      - restore_cache:
          name: Restoring Package Cache
          keys:
            - &cache-key package-cache-v2-{{ checksum "Package.swift" }}-<< parameters.swift-image >>
            - package-cache-v2-{{ checksum "Package.swift" }}
            - package-cache-v2-
      - run:
          name: Install dependencies
          command: swift package update
      - run:
          name: Run tests
          command: |
            swift test --enable-code-coverage
      - run:
          name: Code Coverage
          command: |
            llvm-cov report .build/debug/influxdb-client-swiftPackageTests.xctest -instr-profile .build/debug/codecov/default.profdata -use-color
            llvm-cov export -format="lcov" .build/debug/influxdb-client-swiftPackageTests.xctest -instr-profile .build/debug/codecov/default.profdata > info.lcov
      - save_cache:
          name: Saving Package Cache
          key: *cache-key
          paths:
            - Package.resolved
            - ./.build/repositories
      - store_test_results:
          path: ./
      - store_artifacts:
          path: ./junit.xml
      - run:
          name: Collecting coverage reports
          command: |
            curl -Os https://uploader.codecov.io/latest/linux/codecov
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM
            curl -Os https://uploader.codecov.io/latest/linux/codecov.SHA256SUM.sig
            curl -s https://keybase.io/codecovsecurity/pgp_keys.asc | gpg --no-default-keyring --keyring trustedkeys.gpg --import
            gpgv codecov.SHA256SUM.sig codecov.SHA256SUM
            shasum -a 256 -c codecov.SHA256SUM
            chmod +x ./codecov
            ./codecov

  tests-macOS:
    macos:
      xcode: << parameters.xcode-version >>
    parameters:
      xcode-version:
        type: string
        default: &default-xcode "13.4.1"
      influxdb-package-version:
        type: string
        default: "2.0.4"
      influxdb-image:
        type: string
        default: *default-influxdb-image
    environment:
      SWIFT_JUNIT_RESULT_PATH: junit.xml
    steps:
      - checkout
      - restore_cache:
          name: Restoring Package Cache
          keys:
            - &cache-key-macOS macOS-package-cache-v2-{{ checksum "Package.swift" }}-<< parameters.xcode-version >>-<< parameters.influxdb-package-version >>
            - macOS-package-cache-v2-{{ checksum "Package.swift" }}-<< parameters.influxdb-package-version >>
            - macOS-package-cache-v2-<< parameters.influxdb-package-version >>
      - run:
          name: Download and Start InfluxDB
          background: true
          command: |
            if [ ! -f ./influxdb/influxd ]; then
              mkdir influxdb
              curl https://dl.influxdata.com/influxdb/releases/influxdb2-<< parameters.influxdb-package-version >>-darwin-amd64.tar.gz -o influxdb.tar.gz
              tar zxvf influxdb.tar.gz -C influxdb --strip-components=1
            fi
            ./influxdb/influxd
      - run: echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
      - run:
          name: Post onBoarding request to InfluxDB 2
          command: |
            brew install wget
            ./Scripts/influxdb-onboarding.sh
      - run:
          name: Install dependencies
          command: swift package update
      - run:
          name: Run tests
          command: |
            swift test
      - save_cache:
          name: Saving Package Cache
          key: *cache-key-macOS
          paths:
            - Package.resolved
            - ./.build/repositories
            - /Users/distiller/Library/Caches/Homebrew
            - ./influxdb/
      - store_test_results:
          path: ./
      - store_artifacts:
          path: ./junit.xml

  check-code-style:
    docker:
      - image: swift:5.5
    steps:
      - checkout
      - swiftlint-install
      - run:
          name: Checks style consistency across sources.
          command: make check-lint

  check-documentation:
    docker:
      - image: norionomura/jazzy:0.13.6_swift-5.3.0
    steps:
      - checkout
      - restore_cache:
          name: Restoring Cache
          keys:
            - &documentation-cache-key sc-cache-v4-swift:5.3
      - run:
          name: Checks generating docs
          command: |
            make generate-doc
      - save_cache:
          name: Saving Cache
          key: *documentation-cache-key
          paths:
            - Package.resolved
            - ./.build/repositories

  check-generate-sources:
    docker:
      - image: swift:5.5
    steps:
      - checkout
      - restore_cache:
          name: Restoring Cache
          keys:
            - &generate-sources-cache-key gs-cache-v1-swift:5.5
      - run:
          name: Install Maven & Curl
          command: |
            apt-get update
            apt-get install maven curl wget --yes
      - run:
          name: Checks generating sources from swagger
          command: |
            ./Scripts/generate-sources.sh
            make build
      - save_cache:
          name: Saving Cache
          key: *generate-sources-cache-key
          paths:
            - ~/.m2

  check-examples:
    docker:
      - image: *default-swift-image
      - image: *default-influxdb-image
        environment:
          INFLUXD_HTTP_BIND_ADDRESS: :8086
    steps:
      - prepare
      - swiftlint-install
      - restore_cache:
          name: Restoring Example Cache
          keys:
            - &cache-example-key example-cache-v3-{{ checksum "Examples/CreateNewBucket/Package.swift" }}-{{ checksum "Examples/WriteData/Package.swift" }}-{{ checksum "Examples/QueryCpu/Package.swift" }}-{{ checksum "Examples/QueryCpuData/Package.swift" }}-{{ checksum "Examples/DeleteData/Package.swift" }}-{{ checksum "Examples/ParameterizedQuery/Package.swift" }}
            - example-cache-v3-
      - check-example:
          directory: CreateNewBucket
      - check-example:
          directory: WriteData
      - check-example:
          directory: QueryCpu
      - check-example:
          directory: QueryCpuData
      - check-example:
          directory: DeleteData
      - check-example:
          directory: InfluxDBStatus
      - check-example:
          directory: ParameterizedQuery
      - save_cache:
          name: Saving Example Cache
          key: *cache-example-key
          paths:
            - Examples/CreateNewBucket/Package.resolved
            - Examples/CreateNewBucket/.build/repositories
            - Examples/WriteData/Package.resolved
            - Examples/WriteData/.build/repositories
            - Examples/QueryCpu/Package.resolved
            - Examples/QueryCpu/.build/repositories
            - Examples/QueryCpuData/Package.resolved
            - Examples/QueryCpuData/.build/repositories
            - Examples/DeleteData/Package.resolved
            - Examples/DeleteData/.build/repositories
            - Examples/InfluxDBStatus/Package.resolved
            - Examples/InfluxDBStatus/.build/repositories
            - Examples/ParameterizedQuery/Package.resolved
            - Examples/ParameterizedQuery/.build/repositories

  check-examples-macOS:
    macos:
      xcode: << parameters.xcode-version >>
    parameters:
      xcode-version:
        type: string
        default: *default-xcode
    steps:
      - checkout
      - restore_cache:
          name: Restoring Example Cache
          keys:
            - &cache-example-key example-macOS-cache-v1-{{ checksum "Examples/WriteDataInBatches/Package.swift" }}
            - example-macOS-cache-v1-
      - run: |
          HOMEBREW_NO_AUTO_UPDATE=1
          brew install swiftlint
      - check-example:
          directory: WriteDataInBatches
      - save_cache:
          name: Saving Example Cache
          key: *cache-example-key
          paths:
            - Examples/WriteDataInBatches/Package.resolved
            - Examples/WriteDataInBatches/.build/repositories

workflows:
  version: 2
  build:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - check-code-style
      - check-documentation
      - check-examples
      - check-examples-macOS
      - tests-linux:
          name: tests-linux-5.8
          swift-image: "swift:5.8"
      - tests-linux:
          name: tests-linux-5.9
          swift-image: "swift:5.9"
      - tests-linux:
          name: tests-linux-5.10
          swift-image: "swift:5.10"
      - tests-macOS
  nightly:
    when:
      equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - tests-linux
      - check-generate-sources
