//
// PingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import InfluxDBSwift

extension InfluxDB2API {


public class PingAPI {
    private let influxDB2API: InfluxDB2API

    public init(influxDB2API: InfluxDB2API) {
        self.influxDB2API = influxDB2API
    }

    /**
     Get the status of the instance
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func getPing(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: [String: String]?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        getPingWithRequestBuilder().execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.header, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     Get the status of the instance
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getPing(apiResponseQueue: DispatchQueue? = nil) async throws -> [String: String]? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<[String: String]?, Error>) -> Void in
            getPingWithRequestBuilder().execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.header)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     Get the status of the instance
     - GET /ping
     - Retrieves the status and InfluxDB version of the instance.  Use this endpoint to monitor uptime for the InfluxDB instance. The response returns a HTTP `204` status code to inform you the instance is available.  #### InfluxDB Cloud  - Isn't versioned and doesn't return `X-Influxdb-Version` in the headers.  #### Related guides  - [Influx ping](https://docs.influxdata.com/influxdb/latest/reference/cli/influx/ping/) 
     - responseHeaders: [X-Influxdb-Build(String), X-Influxdb-Version(Int)]
     - returns: RequestBuilder<Void> 
     */
    internal func getPingWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ping"
        let URLString = influxDB2API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void> = influxDB2API.requestBuilderFactory.getRequestNonDecodableBuilder(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Get the status of the instance
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func headPing(apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: [String: String]?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        headPingWithRequestBuilder().execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.header, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     Get the status of the instance
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func headPing(apiResponseQueue: DispatchQueue? = nil) async throws -> [String: String]? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<[String: String]?, Error>) -> Void in
            headPingWithRequestBuilder().execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.header)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     Get the status of the instance
     - HEAD /ping
     - Returns the status and InfluxDB version of the instance.  Use this endpoint to monitor uptime for the InfluxDB instance. The response returns a HTTP `204` status code to inform you the instance is available.  #### InfluxDB Cloud  - Isn't versioned and doesn't return `X-Influxdb-Version` in the headers.  #### Related guides  - [Influx ping](https://docs.influxdata.com/influxdb/latest/reference/cli/influx/ping/) 
     - responseHeaders: [X-Influxdb-Build(String), X-Influxdb-Version(Int)]
     - returns: RequestBuilder<Void> 
     */
    internal func headPingWithRequestBuilder() -> RequestBuilder<Void> {
        let path = "/ping"
        let URLString = influxDB2API.basePath + path
        let parameters: [String:Any]? = nil
        
        let url = URLComponents(string: URLString)

        let requestBuilder: RequestBuilder<Void> = influxDB2API.requestBuilderFactory.getRequestNonDecodableBuilder(method: "HEAD", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: [:], influxDB2API: influxDB2API)

        return requestBuilder
    }

}
}
