//
// DBRPsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import InfluxDBSwift

extension InfluxDB2API {


public class DBRPsAPI {
    private let influxDB2API: InfluxDB2API

    public init(influxDB2API: InfluxDB2API) {
        self.influxDB2API = influxDB2API
    }

    /**
     Delete a database retention policy
     
     - parameter dbrpID: (path) The database retention policy mapping 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func deleteDBRPID(dbrpID: String, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: Void?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        deleteDBRPIDWithRequestBuilder(dbrpID: dbrpID, zapTraceSpan: zapTraceSpan, orgID: orgID, org: org).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     Delete a database retention policy
     
     - parameter dbrpID: (path) The database retention policy mapping 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func deleteDBRPID(dbrpID: String, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, apiResponseQueue: DispatchQueue? = nil) async throws -> Void? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<Void?, Error>) -> Void in
            deleteDBRPIDWithRequestBuilder(dbrpID: dbrpID, zapTraceSpan: zapTraceSpan, orgID: orgID, org: org).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case .success:
                    continuation.resume(returning: ())
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     Delete a database retention policy
     - DELETE /dbrps/{dbrpID}
     - parameter dbrpID: (path) The database retention policy mapping 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - returns: RequestBuilder<Void> 
     */
    internal func deleteDBRPIDWithRequestBuilder(dbrpID: String, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil) -> RequestBuilder<Void> {
        var path = "/dbrps/{dbrpID}"
        let dbrpIDPreEscape = "\(APIHelper.mapValueToPathItem(dbrpID))"
        let dbrpIDPostEscape = dbrpIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dbrpID}", with: dbrpIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "orgID": orgID?.encodeToJSON(), 
            "org": org?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Zap-Trace-Span": zapTraceSpan?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<Void> = influxDB2API.requestBuilderFactory.getRequestNonDecodableBuilder(method: "DELETE", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters, influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     List database retention policy mappings
     
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID to filter on (optional)
     - parameter org: (query) Specifies the organization name to filter on (optional)
     - parameter id: (query) Specifies the mapping ID to filter on (optional)
     - parameter bucketID: (query) Specifies the bucket ID to filter on (optional)
     - parameter _default: (query) Specifies filtering on default (optional)
     - parameter db: (query) Specifies the database to filter on (optional)
     - parameter rp: (query) Specifies the retention policy to filter on (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func getDBRPs(zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, id: String? = nil, bucketID: String? = nil, _default: Bool? = nil, db: String? = nil, rp: String? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: DBRPs?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        getDBRPsWithRequestBuilder(zapTraceSpan: zapTraceSpan, orgID: orgID, org: org, id: id, bucketID: bucketID, _default: _default, db: db, rp: rp).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     List database retention policy mappings
     
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID to filter on (optional)
     - parameter org: (query) Specifies the organization name to filter on (optional)
     - parameter id: (query) Specifies the mapping ID to filter on (optional)
     - parameter bucketID: (query) Specifies the bucket ID to filter on (optional)
     - parameter _default: (query) Specifies filtering on default (optional)
     - parameter db: (query) Specifies the database to filter on (optional)
     - parameter rp: (query) Specifies the retention policy to filter on (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getDBRPs(zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, id: String? = nil, bucketID: String? = nil, _default: Bool? = nil, db: String? = nil, rp: String? = nil, apiResponseQueue: DispatchQueue? = nil) async throws -> DBRPs? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<DBRPs?, Error>) -> Void in
            getDBRPsWithRequestBuilder(zapTraceSpan: zapTraceSpan, orgID: orgID, org: org, id: id, bucketID: bucketID, _default: _default, db: db, rp: rp).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     List database retention policy mappings
     - GET /dbrps
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID to filter on (optional)
     - parameter org: (query) Specifies the organization name to filter on (optional)
     - parameter id: (query) Specifies the mapping ID to filter on (optional)
     - parameter bucketID: (query) Specifies the bucket ID to filter on (optional)
     - parameter _default: (query) Specifies filtering on default (optional)
     - parameter db: (query) Specifies the database to filter on (optional)
     - parameter rp: (query) Specifies the retention policy to filter on (optional)
     - returns: RequestBuilder<DBRPs> 
     */
    internal func getDBRPsWithRequestBuilder(zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, id: String? = nil, bucketID: String? = nil, _default: Bool? = nil, db: String? = nil, rp: String? = nil) -> RequestBuilder<DBRPs> {
        let path = "/dbrps"
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "orgID": orgID?.encodeToJSON(), 
            "org": org?.encodeToJSON(), 
            "id": id?.encodeToJSON(), 
            "bucketID": bucketID?.encodeToJSON(), 
            "default": _default?.encodeToJSON(), 
            "db": db?.encodeToJSON(), 
            "rp": rp?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Zap-Trace-Span": zapTraceSpan?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DBRPs> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters, influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Retrieve a database retention policy mapping
     
     - parameter dbrpID: (path) The database retention policy mapping ID 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func getDBRPsID(dbrpID: String, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: DBRPGet?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        getDBRPsIDWithRequestBuilder(dbrpID: dbrpID, zapTraceSpan: zapTraceSpan, orgID: orgID, org: org).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     Retrieve a database retention policy mapping
     
     - parameter dbrpID: (path) The database retention policy mapping ID 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func getDBRPsID(dbrpID: String, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, apiResponseQueue: DispatchQueue? = nil) async throws -> DBRPGet? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<DBRPGet?, Error>) -> Void in
            getDBRPsIDWithRequestBuilder(dbrpID: dbrpID, zapTraceSpan: zapTraceSpan, orgID: orgID, org: org).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     Retrieve a database retention policy mapping
     - GET /dbrps/{dbrpID}
     - parameter dbrpID: (path) The database retention policy mapping ID 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - returns: RequestBuilder<DBRPGet> 
     */
    internal func getDBRPsIDWithRequestBuilder(dbrpID: String, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil) -> RequestBuilder<DBRPGet> {
        var path = "/dbrps/{dbrpID}"
        let dbrpIDPreEscape = "\(APIHelper.mapValueToPathItem(dbrpID))"
        let dbrpIDPostEscape = dbrpIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dbrpID}", with: dbrpIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "orgID": orgID?.encodeToJSON(), 
            "org": org?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Zap-Trace-Span": zapTraceSpan?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DBRPGet> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false, headers: headerParameters, influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Update a database retention policy mapping
     
     - parameter dbrpID: (path) The database retention policy mapping. 
     - parameter dBRPUpdate: (body) Database retention policy update to apply 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func patchDBRPID(dbrpID: String, dBRPUpdate: DBRPUpdate, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: DBRPGet?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        patchDBRPIDWithRequestBuilder(dbrpID: dbrpID, dBRPUpdate: dBRPUpdate, zapTraceSpan: zapTraceSpan, orgID: orgID, org: org).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     Update a database retention policy mapping
     
     - parameter dbrpID: (path) The database retention policy mapping. 
     - parameter dBRPUpdate: (body) Database retention policy update to apply 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func patchDBRPID(dbrpID: String, dBRPUpdate: DBRPUpdate, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil, apiResponseQueue: DispatchQueue? = nil) async throws -> DBRPGet? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<DBRPGet?, Error>) -> Void in
            patchDBRPIDWithRequestBuilder(dbrpID: dbrpID, dBRPUpdate: dBRPUpdate, zapTraceSpan: zapTraceSpan, orgID: orgID, org: org).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     Update a database retention policy mapping
     - PATCH /dbrps/{dbrpID}
     - parameter dbrpID: (path) The database retention policy mapping. 
     - parameter dBRPUpdate: (body) Database retention policy update to apply 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter orgID: (query) Specifies the organization ID of the mapping (optional)
     - parameter org: (query) Specifies the organization name of the mapping (optional)
     - returns: RequestBuilder<DBRPGet> 
     */
    internal func patchDBRPIDWithRequestBuilder(dbrpID: String, dBRPUpdate: DBRPUpdate, zapTraceSpan: String? = nil, orgID: String? = nil, org: String? = nil) -> RequestBuilder<DBRPGet> {
        var path = "/dbrps/{dbrpID}"
        let dbrpIDPreEscape = "\(APIHelper.mapValueToPathItem(dbrpID))"
        let dbrpIDPostEscape = dbrpIDPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{dbrpID}", with: dbrpIDPostEscape, options: .literal, range: nil)
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dBRPUpdate)

        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "orgID": orgID?.encodeToJSON(), 
            "org": org?.encodeToJSON()
        ])
        let nillableHeaders: [String: Any?] = [
            "Zap-Trace-Span": zapTraceSpan?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DBRPGet> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "PATCH", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters, influxDB2API: influxDB2API)

        return requestBuilder
    }

    /**
     Add a database retention policy mapping
     
     - parameter dBRPCreate: (body) The database retention policy mapping to add 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    public func postDBRP(dBRPCreate: DBRPCreate, zapTraceSpan: String? = nil, apiResponseQueue: DispatchQueue? = nil, completion: @escaping (_ data: DBRP?,_ error: InfluxDBClient.InfluxDBError?) -> Void) {
        postDBRPWithRequestBuilder(dBRPCreate: dBRPCreate, zapTraceSpan: zapTraceSpan).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    #if swift(>=5.5)
    /**
     Add a database retention policy mapping
     
     - parameter dBRPCreate: (body) The database retention policy mapping to add 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @available(macOS 10.15, iOS 13.0, watchOS 6.0, tvOS 13.0, *)
    public func postDBRP(dBRPCreate: DBRPCreate, zapTraceSpan: String? = nil, apiResponseQueue: DispatchQueue? = nil) async throws -> DBRP? {
        try await withCheckedThrowingContinuation { (continuation: CheckedContinuation<DBRP?, Error>) -> Void in
            postDBRPWithRequestBuilder(dBRPCreate: dBRPCreate, zapTraceSpan: zapTraceSpan).execute(apiResponseQueue ?? self.influxDB2API.apiResponseQueue) { result -> Void in
                switch result {
                case let .success(response):
                    continuation.resume(returning: response.body)
                case let .failure(error):
                    continuation.resume(throwing: error)
                }
            }
        }
    }
    #endif

    /**
     Add a database retention policy mapping
     - POST /dbrps
     - parameter dBRPCreate: (body) The database retention policy mapping to add 
     - parameter zapTraceSpan: (header) OpenTracing span context (optional)
     - returns: RequestBuilder<DBRP> 
     */
    internal func postDBRPWithRequestBuilder(dBRPCreate: DBRPCreate, zapTraceSpan: String? = nil) -> RequestBuilder<DBRP> {
        let path = "/dbrps"
        let URLString = influxDB2API.basePath + "/api/v2" + path
        let parameters = JSONEncodingHelper.encodingParameters(forEncodableObject: dBRPCreate)

        let url = URLComponents(string: URLString)
        let nillableHeaders: [String: Any?] = [
            "Zap-Trace-Span": zapTraceSpan?.encodeToJSON()
        ]
        let headerParameters = APIHelper.rejectNilHeaders(nillableHeaders)

        let requestBuilder: RequestBuilder<DBRP> = influxDB2API.requestBuilderFactory.getRequestDecodableBuilder(method: "POST", URLString: (url?.string ?? URLString), parameters: parameters, isBody: true, headers: headerParameters, influxDB2API: influxDB2API)

        return requestBuilder
    }

}
}
